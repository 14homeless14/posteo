from flask import Flask, render_template, request, redirect, session 
import mysql.connector

# Crear una instancia de la aplicaci√≥n Flask
app = Flask(__name__)

# Clave secreta necesaria para usar sesiones (mantener datos entre solicitudes)
app.secret_key = 'clave-super-secreta'  # üîí C√°mbiala por algo m√°s seguro en producci√≥n

# ----------------------------------------------
# FUNCI√ìN: verificar_usuario
# Descripci√≥n: Verifica si las credenciales del usuario existen en la base de datos
# Par√°metros: 
#   - usuario: nombre de usuario ingresado
#   - clave: contrase√±a ingresada
# Retorna:
#   - True si el usuario existe y la contrase√±a coincide
#   - False si no hay coincidencia
# ----------------------------------------------
def verificar_usuario(usuario, clave):
    # Establecer conexi√≥n con la base de datos MySQL
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="123456",  # üîë Cambia por tu contrase√±a real
        database="registroReportes"  # üìÅ Aseg√∫rate de que esta base de datos exista
    )
    cursor = conn.cursor()

    # Ejecutar consulta para verificar credenciales
    cursor.execute("SELECT * FROM usuarios WHERE usuario = %s AND clave = %s", (usuario, clave))
    resultado = cursor.fetchone()  # Obtiene el primer resultado (si existe)

    # Cerrar la conexi√≥n
    conn.close()

    return resultado is not None  # Devuelve True si encontr√≥ al usuario

# ----------------------------------------------
# RUTA: /
# Descripci√≥n: Muestra el formulario de login
# M√©todo: GET
# ----------------------------------------------
@app.route('/')
def index():
    return render_template('login.html')

# ----------------------------------------------
# RUTA: /login
# Descripci√≥n: Procesa el formulario de login
# M√©todo: POST
# ----------------------------------------------
@app.route('/login', methods=['POST'])
def login():
    # Obtener los datos del formulario HTML
    usuario = request.form['userSGA']
    clave = request.form['passwordSGA']

    # Validar credenciales
    if verificar_usuario(usuario, clave):
        # Guardar el usuario en la sesi√≥n
        session['usuario'] = usuario
        return redirect('/consulta')  # Redirige a la p√°gina protegida
    else:
        return "‚ùå Usuario o contrase√±a incorrectos"  # Mostrar mensaje si fall√≥

# ----------------------------------------------
# RUTA: /consulta
# Descripci√≥n: P√°gina protegida, solo accesible si hay sesi√≥n iniciada
# M√©todo: GET
# ----------------------------------------------
@app.route('/consulta')
def bienvenido():
    # Verificar si el usuario est√° en la sesi√≥n
    if 'usuario' in session:
        # Renderiza la p√°gina y pasa el nombre de usuario
        return render_template("consulta.html", usuario=session['usuario'])
    else:
        # Si no hay sesi√≥n activa, redirige al login
        return redirect('/')

# ----------------------------------------------
# RUTA: /logout
# Descripci√≥n: Cierra la sesi√≥n del usuario
# M√©todo: GET
# ----------------------------------------------
@app.route('/logout')
def logout():
    # Elimina al usuario de la sesi√≥n
    session.pop('usuario', None)
    return redirect('/')  # Redirige al login

# ----------------------------------------------
# EJECUCI√ìN DEL SERVIDOR
# Descripci√≥n: Inicia el servidor Flask en modo debug
# ----------------------------------------------
if __name__ == '__main__':
    app.run(debug=True)
